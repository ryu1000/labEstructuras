En cualquier programa que se fuese a ejecutar el CM se no se detenía, 
incluso si la instrucción fuese HLT (HAHAHA creo que esto debería ir 
en la parte de HLT, pero no importa)

Se corrigió así:

En el module reg_CB

always @(negedge CLK) begin  
			if(!SDMA&&((ProxEst==Estado_15)||(ProxEst==Estado_16))) CM<=1'bz;
			else if (!RPS) CM<=1'b0;
			else if ((ProxEst==Estado_1)&&(EstPresente==Estado_16)) CM<=1'b1;
			else if (ProxEst==Estado_30) CM<=CM; //Se agrego esta linea para que CM se detenga en HLT
			else CM<=~(CM);
			
			
			if ((ProxEst==Estado_15)||(ProxEst==Estado_16)) BD<=1'b1;
			else BD<=1'b0;
			if ((EstPresente==Estado_21)||(EstPresente==Estado_22)||(EstPresente==Estado_23)||(EstPresente==Estado_24)) INTOK<=1'b1;
			else INTOK<=1'b0;

		end

/////////////////////-----INICIO CLA---------////////////////////////

*******Programa en ensamblador*************
$0000 CLA
$0001 HLT
******Fin del programa en ensamblador******

(module reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC;
										    RDR<=RDR;
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

    Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR+1; //// le agregamos +1
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC;
										    RDR<=RDR;
									          end
									          
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN CLA-------////////////////////////////



/////////////////////-----INICIO LDAinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 HLT
******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN LDAinm-------////////////////////////////



/////////////////////-----INICIO ADDinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$04
$0001 ADD #$06
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ADDinm-------////////////////////////////



/////////////////////-----INICIO SUBinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$0A
$0001 SUB #$06
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

(modulo acumulador)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

SUBinm: {BC,A}<=A+BUSDAT;

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

SUBinm: {BC,A}<=A-BUSDAT; // se cambio + por -

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN SUBinm-------////////////////////////////



/////////////////////-----INICIO ANDinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 AND #$02
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ANDinm-------////////////////////////////



/////////////////////-----INICIO ORAinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 ORA #$02
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ORAinm-------////////////////////////////



/////////////////////-----INICIO STA---------////////////////////////

*******Programa en ensamblador*************
@0000 CLA
      STA @1000
      HLT
******Fin del programa en ensamblador******

(module reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC; 
										    RDR<=RDR;
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC+1; // le agregamos +1
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC+1; ///Le agregamos un +1
										    RDR<=RDR+1; //Le agregamos un +1
									          end
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Con este programa tambien se confirma que la instruccion CLA funciona
correctamente ya que se observa que el dato que la CPU quiere escribir
en la memoria es un $00
///////////////////////-----FIN STA-------////////////////////////////



/////////////////////-----INICIO LDA---------////////////////////////

*******Programa en ensamblador*************
En la posicion 1000 se escribió previamente un $FF
@0000 LDA $1000
@0001 HLT
******Fin del programa en ensamblador******

(En el modulo reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC; 
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC; 
										    RDR<=RDR; 
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC+1; //Le agregamos +1
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC+1; ///Le agregamos un +1
										    RDR<=RDR+1; //Le agregamos un +1
									          end
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN LDA-------////////////////////////////



/////////////////////-----INICIO ADD---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $02

$0000 LDA #$06
$0001 ADD $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ADD-------////////////////////////////



/////////////////////-----INICIO SUB---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $02

$0000 LDA #$06
$0001 SUB $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN SUB-------////////////////////////////



/////////////////////-----INICIO AND---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 AND $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN AND-------////////////////////////////



/////////////////////-----INICIO ORA--------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 ORA $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ORA-------////////////////////////////

/////////////////////-----INICIO JMP--------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 ORA $2000
$0002 JMP $0004
$0003 STA $1000
$0004 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el código

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN JMP-------////////////////////////////

/////////////////////-----INICIO TAP-PHA---------////////////////////////
Las dos instrucciones fueron probadas simultáneamente.

*******Programa en ensamblador*************
$0000 CLA
$0001 TAP
$0002 PHA
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar los códigos.

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN TAP-PHA-------////////////////////////////


/////////////////////-----INICIO JSR---------////////////////////////

*******Programa en ensamblador*************
$0000 CLA
$0001 TAP
$0002 JSR $2000
$2000 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar el código

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN JSR-------////////////////////////////


/////////////////////-----INICIO RTS---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$02
$0001 TAP
$0002 RTS
$2000 HLT
$FF00 $20
$FF01 $00

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN RTS-------////////////////////////////


/////////////////////-----INICIO PLS---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$01
$0001 TAP
$0002 PLS
$0003 HLT
$FF00 $2F 

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN PLS-------////////////////////////////


/////////////////////-----INICIO PHS---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$01
$0001 TAP
$0002 PLS
$0003 PHS
$0004 HLT
$FF00 $2F

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN PHS-------////////////////////////////


/////////////////////-----INICIO BEQ---------////////////////////////
    M[0]=CLA;
    M[1]=LDA;
    M[2]=8'h00;
    M[3]=8'h30;
    M[12288]=8'h0;
    M[4]=BEQ;
    M[5]=8'h1; //<---numero de posiciones que tiene que saltar
    M[6]=INA; //<--posicion 0
    M[7]=HLT; //<-- posicion 1

El salto solo está correcto si el salto empieza a contar en 0 después
de decirle el número de lugares... Yo creo que SI es así, pero agradecería
una segunda opinión(?)
*******Programa en ensamblador*************
Salto:
Se guardó previamente un cero en la posición $3000
$0000 CLA
$0001 LDA $3000
$0002 BEQ $0004
$0003 INA
$0004 HLT

No salto:
Se guardó previamente un uno en la posición $3000
$0000 CLA
$0001 LDA $3000
$0002 BEQ $0004
$0003 INA
$0004 HLT

******Fin del programa en ensamblador******
>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<
El código estaba correcto~
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN BEQ-------////////////////////////////


/////////////////////-----INICIO BNE---------////////////////////////

*******Programa en ensamblador*************
Cuando salta:
Se guardó previamente un uno en la posición $3000
$0000 CLA
$0001 LDA $3000
$0002 BNE $0004
$0003 INA
$0004 HLT

Cuando no salta:
Se guardó previamente un cero en la posición $3000
$0000 CLA
$0001 LDA $3000
$0002 BNE $0004
$0003 INA
$0004 HLT
******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario arreglar el codigo
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN BNE-------////////////////////////////


/////////////////////-----INICIO CLC---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$00
$0001 TAP
$0002 CLC
$0003 PHS
$0004 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN CLC-------////////////////////////////


/////////////////////-----INICIO BCS---------////////////////////////

*******Programa en ensamblador*************
Cuando saltó:
$0000 CLC
$0001 LDA #$FF
$0002 ADD #$01
$0003 BCS $0005
$0004 STA $1000
$0005 HLT

Cuando no saltó:
$0000 CLC
$0001 LDA #$FE
$0002 ADD #$01
$0003 BCS $0005
$0004 STA $1000
$0005 HLT
******Fin del programa en ensamblador*******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN BCS-------////////////////////////////



/////////////////////-----INICIO BCC---------////////////////////////

*******Programa en ensamblador*************
Cuando saltó:
$0000 CLC
$0001 LDA #$FE
$0002 ADD #$01
$0003 BCC $0005
$0004 STA $1000
$0005 HLT

Cuando no saltó:
$0000 CLC
$0001 LDA #$FF
$0002 ADD #$01
$0003 BCC $0005
$0004 STA $1000
$0005 HLT
******Fin del programa en ensamblador******

(En el modulo reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<
BCC: begin
 
						PC<=BUSDAT[7] ? PC + {8'hFF,BUSDAT} : PC + {8'b0,BUSDAT};
					        RDR<=BUSDAT[7] ? PC + {8'hFF,BUSDAT} : PC + {8'b0,BUSDAT};

				     end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
BCC: begin
		case(S[0])
				1'b1: begin
						PC<=PC;
						RDR<=RDR+16'b1;
				end
				1'b0: begin
						PC<=BUSDAT[7] ? PC + {8'hFF,BUSDAT} : PC + {8'b0,BUSDAT};

						RDR<=BUSDAT[7] ? PC + {8'hFF,BUSDAT} : PC + {8'b0,BUSDAT};
				end
		endcase
end

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN BCC-------////////////////////////////

/////////////////////-----INICIO BPL---------////////////////////////

*******Programa en ensamblador*************
Cuando saltó:
$0000 LDA #$00
$0001 SUB #$01
$0002 BPL $0004
$0003 STA $1000
$0004 HLT

Cuando no saltó:
$0000 LDA #$01
$0001 SUB #$01
$0002 BPL $0004
$0003 STA $1000
$0004 HLT
******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN BPL-------////////////////////////////


/////////////////////-----INICIO BVS---------////////////////////////

*******Programa en ensamblador*************
Cuando sí salta:
$0000 LDA #$80
$0001 ADD #$81
$0002 BVS $0004
$0003 STA $1000
$0004 HLT

Cuando no salta:
$0000 LDA #$80
$0001 ADD #$08
$0002 BVS $0004
$0003 STA $1000
$0004 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN BVS-------////////////////////////////


/////////////////////-----INICIO BVC---------////////////////////////

*******Programa en ensamblador*************
Cuando sí salta:
$0000 LDA #$80
$0001 ADD #$08
$0002 BVC $0004
$0003 STA $1000
$0004 HLT

Cuando no salta:
$0000 LDA #$80
$0001 ADD #$81
$0002 BVC $0004
$0003 STA $1000
$0004 HLT

******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que corregir el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN BVC-------////////////////////////////


/////////////////////-----INICIO NOP---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #01
$0001 NOP
$0002 STA $0110
$0003 HLT
******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN NOP-------////////////////////////////


/////////////////////-----INICIO INA---------////////////////////////
*******Programa en ensamblador*************
$0000 LDA #$01
$0001 INA
$0002 STA #0110
$0003 HLT
******Fin del programa en ensamblador******

(En el modulo acumulador)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<
Estado_2: case(RI)
			    	      	CLA: A<=8'b0;
					INA: {BC,A}<=A+2;

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: case(RI)
			    	      	CLA: A<=8'b0;
					INA: {BC,A}<=A+1;

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN INA-------////////////////////////////


/////////////////////-----INICIO DCA---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$01
$0001 DCA
$0002 STA #0110
$0003 HLT
******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN DCA-------////////////////////////////


/////////////////////-----INICIO ROL---------////////////////////////
*******Programa en ensamblador*************
$0000 CLA
$0001 LDA #$05
$0002 ROL
$0003 STA $1000
$0004 HLT
******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo necesidad de arreglarlo
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN ROL-------////////////////////////////


/////////////////////-----INICIO ROR---------////////////////////////
*******Programa en ensamblador*************
$0000 CLA
$0001 LDA #$06
$0002 ROR
$0003 STA $1000
$0004 HLT
******Fin del programa en ensamblador******
>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo necesidad de arreglarlo
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
///////////////////////-----FIN ROR-------////////////////////////////


/////////////////////-----INICIO SEC---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$00
$0001 TAP
$0002 SEC
$0003 PHS
$0004 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No hubo que arreglar el código.
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN SEC-------////////////////////////////

/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



