En cualquier programa que se fuese a ejecutar el CM se no se detenía, incluso si la instrucción fuese HLT (HAHAHA
creo que esto debería ir en la parte de HLT, pero no importa)

Se corrigió así:

En el module reg_CB

always @(negedge CLK) begin  
			if(!SDMA&&((ProxEst==Estado_15)||(ProxEst==Estado_16))) CM<=1'bz;
			else if (!RPS) CM<=1'b0;
			else if ((ProxEst==Estado_1)&&(EstPresente==Estado_16)) CM<=1'b1;
			else if (ProxEst==Estado_30) CM<=CM; //Se agrego esta linea para que CM se detenga en HLT
			else CM<=~(CM);
			
			
			if ((ProxEst==Estado_15)||(ProxEst==Estado_16)) BD<=1'b1;
			else BD<=1'b0;
			if ((EstPresente==Estado_21)||(EstPresente==Estado_22)||(EstPresente==Estado_23)||(EstPresente==Estado_24)) INTOK<=1'b1;
			else INTOK<=1'b0;

		end

/////////////////////-----INICIO CLA---------////////////////////////

*******Programa en ensamblador*************
$0000 CLA
$0001 HLT
******Fin del programa en ensamblador******

(module reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC;
										    RDR<=RDR;
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

    Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR+1; //// le agregamos +1
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC;
										    RDR<=RDR;
									          end
									          
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN CLA-------////////////////////////////



/////////////////////-----INICIO LDAinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 HLT
******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN LDAinm-------////////////////////////////



/////////////////////-----INICIO ADDinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$04
$0001 ADD #$06
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ADDinm-------////////////////////////////



/////////////////////-----INICIO SUBinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$0A
$0001 SUB #$06
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

(modulo acumulador)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

SUBinm: {BC,A}<=A+BUSDAT;

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

SUBinm: {BC,A}<=A-BUSDAT; // se cambio + por -

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN SUBinm-------////////////////////////////



/////////////////////-----INICIO ANDinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 AND #$02
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ANDinm-------////////////////////////////



/////////////////////-----INICIO ORAinm---------////////////////////////

*******Programa en ensamblador*************
$0000 LDA #$06
$0001 ORA #$02
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<
No fue necesario...
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ORAinm-------////////////////////////////



/////////////////////-----INICIO STA---------////////////////////////

*******Programa en ensamblador*************
@0000 CLA
      STA @1000
      HLT
******Fin del programa en ensamblador******

(module reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC;
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC; 
										    RDR<=RDR;
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC+1; // le agregamos +1
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC+1; ///Le agregamos un +1
										    RDR<=RDR+1; //Le agregamos un +1
									          end
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Con este programa tambien se confirma que la instruccion CLA funciona
correctamente ya que se observa que el dato que la CPU quiere escribir
en la memoria es un $00
///////////////////////-----FIN STA-------////////////////////////////



/////////////////////-----INICIO LDA---------////////////////////////

*******Programa en ensamblador*************
En la posicion 1000 se escribió previamente un $FF
@0000 LDA $1000
@0001 HLT
******Fin del programa en ensamblador******

(En el modulo reg_PC)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC; 
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC; 
										    RDR<=RDR; 
									          end

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

Estado_2: begin
		    		case(RI)
				 CPA,LDAinm,ADDinm,TAP,TPA,CLA,INA,DCA,SUBinm,ANDinm,ORAinm,INP,OUT: begin
				 								PC<=PC+1; //Le agregamos +1
												RDR<=RDR+1;
				 							     end
				 ROL,ROR,BCC,BCS,CLC,SEC,SEI,CLI,NOP,BNE,BEQ,BMI,BPL,STA,LDA,AND,SUB,ORA,ADD,JMP,BVS,BVC: begin
				 						    PC<=PC+1; ///Le agregamos un +1
										    RDR<=RDR+1; //Le agregamos un +1
									          end
>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN LDA-------////////////////////////////



/////////////////////-----INICIO ADD---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $02

$0000 LDA #$06
$0001 ADD $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ADD-------////////////////////////////



/////////////////////-----INICIO SUB---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $02

$0000 LDA #$06
$0001 SUB $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN SUB-------////////////////////////////



/////////////////////-----INICIO AND---------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 AND $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN AND-------////////////////////////////



/////////////////////-----INICIO ORA--------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 ORA $2000
$0002 STA $1000
$0003 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el codigo

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN ORA-------////////////////////////////

/////////////////////-----INICIO JMP--------////////////////////////

*******Programa en ensamblador*************
Previamente se escribió en la pocisión $2000 de la memoria un $05

$0000 LDA #$06
$0001 ORA $2000
$0002 JMP $0004
$0003 STA $1000
$0004 HLT

******Fin del programa en ensamblador******

>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

No fue necesario arreglar el código

>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN JMP-------////////////////////////////

/////////////////////-----INICIO Instruccion---------////////////////////////

*******Programa en ensamblador*************
$0000 
$0001 
$0002 
$0003
$0004
$0005
$0006

******Fin del programa en ensamblador******

(En el modulo xxx)

>>>>>>>>>>Codigo incorrecto en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<


>>>>>>>>>>FIN de Codigo arreglado en Verilog<<<<<<<<<<<<<<<<<<

///////////////////////-----FIN Instruccion-------////////////////////////////



